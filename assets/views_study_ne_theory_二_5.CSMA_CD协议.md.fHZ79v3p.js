import{_ as n,C as r,c as o,o as _,b1 as i,G as s,j as l,a as t}from"./chunks/framework.BbzeyoJx.js";const S=JSON.parse('{"title":"二.5.CSMA/CD协议","description":"","frontmatter":{},"headers":[],"relativePath":"views/study/ne/theory/二/5.CSMA_CD协议.md","filePath":"views/study/ne/theory/二/5.CSMA_CD协议.md","lastUpdated":1752743746000}'),u={name:"views/study/ne/theory/二/5.CSMA_CD协议.md"};function d(p,a,c,b,h,C){const e=r("ImageViewer");return _(),o("div",null,[a[0]||(a[0]=i('<h1 id="二-5-csma-cd协议" tabindex="-1">二.5.CSMA/CD协议 <a class="header-anchor" href="#二-5-csma-cd协议" aria-label="Permalink to &quot;二.5.CSMA/CD协议&quot;">​</a></h1><h3 id="_1-传统局域网" tabindex="-1">1.传统局域网 <a class="header-anchor" href="#_1-传统局域网" aria-label="Permalink to &quot;1.传统局域网&quot;">​</a></h3><h4 id="拓扑结构" tabindex="-1">拓扑结构 <a class="header-anchor" href="#拓扑结构" aria-label="Permalink to &quot;拓扑结构&quot;">​</a></h4>',3)),s(e,{src:"/blog/images/study/ne/传统局域网拓扑结构.png",title:"传统局域网拓扑结构"}),a[1]||(a[1]=i('<br><h4 id="工作机制" tabindex="-1">工作机制 <a class="header-anchor" href="#工作机制" aria-label="Permalink to &quot;工作机制&quot;">​</a></h4><ul><li>采用广播通信方式，为了实现<span class="green">一对一</span>通信，将接收站的硬件地址写入帧首部的<span class="green">目的地址</span>字段中。</li><li>仅当数据帧中的目的地址与<span class="green">适配器硬件地址</span>一致时，才能接收这个数据帧。</li></ul>',3)),s(e,{src:"/blog/images/study/ne/传统局域网工作机制.png",title:"传统局域工作机制"}),a[2]||(a[2]=l("br",null,null,-1)),a[3]||(a[3]=l("h4",{id:"共享信道带来的问题",tabindex:"-1"},[t("共享信道带来的问题 "),l("a",{class:"header-anchor",href:"#共享信道带来的问题","aria-label":'Permalink to "共享信道带来的问题"'},"​")],-1)),a[4]||(a[4]=l("p",null,[t("若多个设备在共享的广播信道上"),l("span",{class:"blue"},"同时发送"),t("数据，则会造成彼此干扰，导致发送失败。")],-1)),s(e,{src:"/blog/images/study/ne/共享信道问题.png",title:"共享信道问题"}),a[5]||(a[5]=i('<br><h4 id="媒体共享技术" tabindex="-1">媒体共享技术 <a class="header-anchor" href="#媒体共享技术" aria-label="Permalink to &quot;媒体共享技术&quot;">​</a></h4><p>静态划分信道</p><ul><li>频分复用</li><li>时分复用</li><li>波分复用</li><li>码分复用 <br></li></ul><p>动态媒体接入控制(多点接入)<br></p><ul><li>随机接入：所有的用户可随机地发送信息</li><li>受控接入：用户必须服从一定的控制。例如轮询(polling)。</li></ul><h3 id="_2-csma-cd协议" tabindex="-1">2.CSMA/CD协议 <a class="header-anchor" href="#_2-csma-cd协议" aria-label="Permalink to &quot;2.CSMA/CD协议&quot;">​</a></h3><p>CSMA/CD(Carrier Sense Multiple Access with Collision Detection)：载波监听多点接入/碰撞检测</p><ul><li>多点接入：说明这是总线型网络。许多计算机以多点接入的方式连接在一根总线上。</li><li>载波监听：即&quot;边发送边监听&quot;。不管在想要发送数据之前，还是在发送数据之中，每个站都必须不停地检测信道。</li><li>碰撞检测：适配器边发送数据，边检测信道上的信号电压的变化情况。电压摆动值超过一定的门限值时，就认为总线上至少有两个站在同事发送时间，表面产生了碰撞(或冲突)。</li></ul><h3 id="_3-csma-cd协议工作流程" tabindex="-1">3.CSMA/CD协议工作流程 <a class="header-anchor" href="#_3-csma-cd协议工作流程" aria-label="Permalink to &quot;3.CSMA/CD协议工作流程&quot;">​</a></h3><p><span class="red">先听后发，边发边听，碰撞停止，随机延发</span></p>',11)),s(e,{src:"/blog/images/study/ne/CSMA_CD协议工作流程.png",title:"CSMA_CD协议工作流程"}),a[6]||(a[6]=i('<br><h3 id="_4-碰撞后重传的时机" tabindex="-1">4.碰撞后重传的时机 <a class="header-anchor" href="#_4-碰撞后重传的时机" aria-label="Permalink to &quot;4.碰撞后重传的时机&quot;">​</a></h3><ul><li>采用<span class="green">截断二进制指数退避(truncated binary exponential backoff)</span>确定</li><li>发生碰撞后的站停止发送数据后，要退避一个随机时间后再发送数据</li><li><ul><li>1.基本退避时间 = <span class="brown">2τ</span></li></ul></li><li><ul><li>2.从整数集合[0, 1, ..., (2(k) - 1)]中<span class="brown">随机</span>地取出一个数，记为r</li></ul></li><li><ul><li><span class="green">重传所需的时延 = r x 基本退避时间</span></li></ul></li><li><ul><li>3.参数k = Min[重传次数, <span class="brown">10</span>]</li></ul></li><li><ul><li>4.当重传达<span class="brown">16</span>次扔不能成功时即丢弃该帧，并向高层报告</li></ul></li></ul><h3 id="_5-10-mbit-s以太网争用期的长度" tabindex="-1">5.10 Mbit/s以太网争用期的长度 <a class="header-anchor" href="#_5-10-mbit-s以太网争用期的长度" aria-label="Permalink to &quot;5.10 Mbit/s以太网争用期的长度&quot;">​</a></h3><ul><li>争用期的长度= 51.2us(2τ)</li><li>对于10 Mbit/s以太网，在争用期内可发送512bit，即64字节</li><li><ul><li>以太网在发送数据时，若前64字节没有发生冲突，则后续的数据就不会发生冲突</li></ul></li><li><ul><li>以太网规定了<span class="red">最短有效帧长为64字节</span>。凡长度小于64字节的帧都是由于冲突二异常中止的无效帧，应当立即将其丢弃。</li></ul></li></ul>',5))])}const A=n(u,[["render",d]]);export{S as __pageData,A as default};
