import{_ as t,C as n,c as r,o,b1 as s,G as e,j as i,a as _}from"./chunks/framework.BbzeyoJx.js";const g=JSON.parse('{"title":"三.3.IP协议","description":"","frontmatter":{},"headers":[],"relativePath":"views/study/ne/theory/三/3.IP协议.md","filePath":"views/study/ne/theory/三/3.IP协议.md","lastUpdated":1753172035000}'),d={name:"views/study/ne/theory/三/3.IP协议.md"};function p(u,l,P,T,I,m){const a=n("ImageViewer");return o(),r("div",null,[l[0]||(l[0]=s('<h1 id="三-3-ip协议" tabindex="-1">三.3.IP协议 <a class="header-anchor" href="#三-3-ip协议" aria-label="Permalink to &quot;三.3.IP协议&quot;">​</a></h1><h3 id="_1-ip数据包的格式" tabindex="-1">1.IP数据包的格式 <a class="header-anchor" href="#_1-ip数据包的格式" aria-label="Permalink to &quot;1.IP数据包的格式&quot;">​</a></h3><ul><li>固定首部：20字节</li><li>版本：4</li><li>首部长度：5(以<span class="red">4字节</span>为单位)</li><li>区分服务：数据包的服务级别</li><li>总长度：首部与数据之和</li><li>标识：识别号，区分不同的IP包</li><li>标志：<span class="red">DF禁止分片、MF更多分片</span></li><li>片偏移：占13位，某片在原分组中的相对位置，以<span class="red">8个字节</span>为偏移单位</li><li>生存时间：<span class="red">TTL</span>，标明该数据包可通过的路由器数的最大值</li><li>协议号：标识上层的承载对象</li><li>首部校验和：对首部进行校验计算</li></ul>',3)),e(a,{src:"/blog/images/study/ne/IP数据包格式.png",title:"IP数据包格式"}),l[1]||(l[1]=s('<br><h3 id="_2-ip数据包分片" tabindex="-1">2.IP数据包分片 <a class="header-anchor" href="#_2-ip数据包分片" aria-label="Permalink to &quot;2.IP数据包分片&quot;">​</a></h3><ul><li>接收到的数据大于MTU(最大传输单元)1500字节时，需要对数据进行分片</li><li>只对数据部分分片</li><li>以1480字节为一个单位进行切割</li><li><ul><li>因为要加上首部20字节，所以每个分片的长度为1480 + 20 = 1500字节</li></ul></li><li>将总长度 / 8 得到片偏移</li><li><ul><li>因为总长度是16位2进制表示，片偏移是8位2进制表示，总长度是片偏移的8倍</li></ul></li><li>IP包的分片可能是在源头，也可能是在中间，但是IP包重组一定是在最终目的地完成</li></ul>',3)),e(a,{src:"/blog/images/study/ne/IP数据包分片.png",title:"IP数据包分片"}),l[2]||(l[2]=i("br",null,null,-1)),e(a,{src:"/blog/images/study/ne/IP数据包分片结果.png",title:"IP数据包分片结果"}),l[3]||(l[3]=s('<br><h3 id="_3-ttl的应用" tabindex="-1">3.TTL的应用 <a class="header-anchor" href="#_3-ttl的应用" aria-label="Permalink to &quot;3.TTL的应用&quot;">​</a></h3><ul><li>windows初始TTL一般为<span class="green">128</span>，win10以后新版本为<span class="green">64</span></li><li>Linux初始TTL一般为<span class="green">64</span></li><li>决定数据包的传播距离，每经过一个<span class="green">三层设备则减1</span>，传播距离为0时丢弃数据包</li><li>三层防环</li><li>tracert/traceroute跟踪路径</li></ul><h3 id="_4-常见协议号" tabindex="-1">4.常见协议号 <a class="header-anchor" href="#_4-常见协议号" aria-label="Permalink to &quot;4.常见协议号&quot;">​</a></h3>',4)),e(a,{src:"/blog/images/study/ne/常见协议号.png",title:"常见协议号"}),l[4]||(l[4]=i("br",null,null,-1)),l[5]||(l[5]=i("h3",{id:"_5-首部校验和",tabindex:"-1"},[_("5.首部校验和 "),i("a",{class:"header-anchor",href:"#_5-首部校验和","aria-label":'Permalink to "5.首部校验和"'},"​")],-1)),e(a,{src:"/blog/images/study/ne/首部校验和.png",title:"首部校验和"}),l[6]||(l[6]=i("br",null,null,-1))])}const h=t(d,[["render",p]]);export{g as __pageData,h as default};
