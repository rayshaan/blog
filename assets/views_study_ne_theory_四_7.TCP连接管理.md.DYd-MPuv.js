import{_ as r,C as t,c as p,o,a4 as n,G as i,j as a,a as e}from"./chunks/framework.C_GGjjHE.js";const h=JSON.parse('{"title":"四.7.TCP连接管理","description":"","frontmatter":{},"headers":[],"relativePath":"views/study/ne/theory/四/7.TCP连接管理.md","filePath":"views/study/ne/theory/四/7.TCP连接管理.md","lastUpdated":1753783179000}'),c={name:"views/study/ne/theory/四/7.TCP连接管理.md"};function _(u,s,T,P,d,C){const l=t("ImageViewer");return o(),p("div",null,[s[0]||(s[0]=n('<h1 id="四-7-tcp连接管理" tabindex="-1">四.7.TCP连接管理 <a class="header-anchor" href="#四-7-tcp连接管理" aria-label="Permalink to &quot;四.7.TCP连接管理&quot;">​</a></h1><h3 id="_1-连接的三个阶段" tabindex="-1">1.连接的三个阶段 <a class="header-anchor" href="#_1-连接的三个阶段" aria-label="Permalink to &quot;1.连接的三个阶段&quot;">​</a></h3><ul><li>TCP是<span class="green">面向连接</span>的协议</li><li>TCP连接有三个阶段</li><li><ul><li>1.<span class="green">连接建立</span></li></ul></li><li><ul><li>2.<span class="green">数据传送</span></li></ul></li><li><ul><li>3.<span class="green">连接释放</span></li></ul></li><li>TCP的连接管理就是使TCP连接的建立和释放都能正常地进行</li></ul><h3 id="_2-tcp的连接建立" tabindex="-1">2.TCP的连接建立 <a class="header-anchor" href="#_2-tcp的连接建立" aria-label="Permalink to &quot;2.TCP的连接建立&quot;">​</a></h3><ul><li>TCP建立连接的过程叫<span class="green">握手</span></li><li>采用<span class="green">三报文握手</span>：在客户和服务器之间交换了三个TCP报文段，以防止已失效的连接请求报文段突然又传送到了，因而产生TCP连接建立错误</li><li>TCP的连接建立采用采用<span class="brown">客户服务器</span>方式</li><li><span class="brown">主动发起</span>连接建立的应用进程叫做<span class="brown">客户(client)</span></li><li><span class="brown">被动等待</span>连接建立的应用进程叫做<span class="brown">服务器(server)</span></li></ul><h3 id="_3-tcp三次握手" tabindex="-1">3.TCP三次握手 <a class="header-anchor" href="#_3-tcp三次握手" aria-label="Permalink to &quot;3.TCP三次握手&quot;">​</a></h3>',6)),i(l,{src:"/blog/images/study/ne/TCP三次握手.png",title:"TCP三次握手"}),s[1]||(s[1]=n('<br><p>TCP标准规定：<br></p><ul><li><span class="green">SYN</span>报文不能携带数据，但会<span class="green">消耗掉一个序号</span></li><li><span class="green">FIN</span>报文段即使不懈怠数据，也<span class="green">消耗掉一个序号</span></li><li><span class="green">ACK</span>报文段可以携带数据，但如果不携带数据，则<span class="green">不消耗序号</span></li></ul><h3 id="_4-tcp四次挥手" tabindex="-1">4.TCP四次挥手 <a class="header-anchor" href="#_4-tcp四次挥手" aria-label="Permalink to &quot;4.TCP四次挥手&quot;">​</a></h3>',4)),i(l,{src:"/blog/images/study/ne/TCP四次挥手.png",title:"TCP四次挥手"}),s[2]||(s[2]=a("br",null,null,-1)),s[3]||(s[3]=a("ul",null,[a("li",null,[e("数据传输结束后，通信的"),a("span",{class:"green"},"双方"),e("都可以释放连接")]),a("li",null,[e("TCP连接释放过程是"),a("span",{class:"green"},"四报文挥手")]),a("li",null,[e("MSL是Maximum Segment Lifetim英文的缩写，"),a("span",{class:"green"},'"报文最大生存时间"'),e("，RIQ 793中规定MSL为"),a("span",{class:"green"},"2分钟"),e("，实际应用中常用的是30秒，1分钟和2分钟等")])],-1))])}const m=r(c,[["render",_]]);export{h as __pageData,m as default};
