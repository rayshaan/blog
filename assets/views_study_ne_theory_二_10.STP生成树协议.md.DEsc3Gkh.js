import{_ as r,C as n,c as o,o as u,b1 as s,G as e,j as i,a as t}from"./chunks/framework.BbzeyoJx.js";const m=JSON.parse('{"title":"二.10.STP生成树协议","description":"","frontmatter":{},"headers":[],"relativePath":"views/study/ne/theory/二/10.STP生成树协议.md","filePath":"views/study/ne/theory/二/10.STP生成树协议.md","lastUpdated":1753087294000}'),P={name:"views/study/ne/theory/二/10.STP生成树协议.md"};function p(d,l,T,S,_,b){const a=n("ImageViewer");return u(),o("div",null,[l[0]||(l[0]=s('<h1 id="二-10-stp生成树协议" tabindex="-1">二.10.STP生成树协议 <a class="header-anchor" href="#二-10-stp生成树协议" aria-label="Permalink to &quot;二.10.STP生成树协议&quot;">​</a></h1><h3 id="_1-生成树协议简介" tabindex="-1">1.生成树协议简介 <a class="header-anchor" href="#_1-生成树协议简介" aria-label="Permalink to &quot;1.生成树协议简介&quot;">​</a></h3><ul><li>目的：为了解决交换网络中的环路问题</li><li>分类(华为)：</li><li><ul><li>STP(802.1D)-传统生成树协议，收敛慢</li></ul></li><li><ul><li>RSTP(802.1W)-快读生成树协议，收敛快</li></ul></li><li><ul><li>MSTP(802.1S)多生成树协议，除了收敛快，还能vlan负载均衡</li></ul></li></ul><h3 id="_2-stp协议" tabindex="-1">2.STP协议 <a class="header-anchor" href="#_2-stp协议" aria-label="Permalink to &quot;2.STP协议&quot;">​</a></h3><h4 id="_1-bpdu报文" tabindex="-1">1.BPDU报文 <a class="header-anchor" href="#_1-bpdu报文" aria-label="Permalink to &quot;1.BPDU报文&quot;">​</a></h4><ul><li>BPDU(桥协议数据单元)</li><li>BPDU报文被封装在<span class="brown">以太网802.3</span>数据帧中，目的MAC是组播MAC：<span class="brown">01-80-C2-00-00-00</span></li><li>配置BPDU(Configuration BPDU)：用来进行生成树计算和维护生成树拓扑的报文</li><li>TCN BPDU(Topology Change Notification BPDU)：拓扑变化通知BPDU，是在网络拓扑发生变化时，用来通知相关设备的报文</li></ul><h4 id="_2-配置bpdu格式" tabindex="-1">2.配置BPDU格式 <a class="header-anchor" href="#_2-配置bpdu格式" aria-label="Permalink to &quot;2.配置BPDU格式&quot;">​</a></h4>',7)),e(a,{src:"/blog/images/study/ne/配置BPDU.png",title:"配置BPDU"}),l[1]||(l[1]=s('<br><ul><li>Root Identifier：当前根桥的BID，由桥优先级的和MAC地址组成，优先级默认<span class="brown">32768</span></li><li>Root Path Cost：根路径开销</li><li>Bridge Identifier：本交换设备的BID</li><li>Port Identifier：发送该BPDU的端口ID，由端口优先级和端口编号组成，优先级默认<span class="brown">128</span></li></ul><h4 id="_3-根桥、根端口、指定端口的选举原则" tabindex="-1">3.根桥、根端口、指定端口的选举原则 <a class="header-anchor" href="#_3-根桥、根端口、指定端口的选举原则" aria-label="Permalink to &quot;3.根桥、根端口、指定端口的选举原则&quot;">​</a></h4><ul><li>1.根网桥的选举规则(<span class="brown">所有交换机选一个根交换机</span>)：</li><li><ul><li>首先，比优先级，优先级小者优先</li></ul></li><li><ul><li>其次，比MAC地址，MAC地址小者优先</li></ul></li><li>2、根端口(RP)的选举原则(<span class="brown">每个非根交换机选一个根端口</span>)：</li><li><ul><li>首先，选择根路径开销(Root Path Cost，RPC)最低的端口</li></ul></li><li><ul><li>其次，若有多个端口的RPC相等，选择对端桥ID最低的端口</li></ul></li><li><ul><li>最后，若有多个端口的对端桥ID相等，选择对端端口ID最低的端口</li></ul></li><li>3.指定端口(DP)的选举原则(<span class="brown">每个二层链路选一个指定端口</span>)：</li><li><ul><li>首先，选择根路径开销(Root Path Cost，RPC)最低的端口</li></ul></li><li><ul><li>其次，若有多个端口的RPC相等，选择对桥ID最低的端口</li></ul></li><li><ul><li>最后，若有多个端口的桥ID相等，选择端口ID最低的端口</li></ul></li></ul><h4 id="_4-stp的接口状态迁移" tabindex="-1">4.STP的接口状态迁移 <a class="header-anchor" href="#_4-stp的接口状态迁移" aria-label="Permalink to &quot;4.STP的接口状态迁移&quot;">​</a></h4><ul><li>1.接口初始化或激活，自动进入阻塞状态</li><li>2.接口被选举为根接口或指定接口，自动进入侦听状态</li><li>3.转发延迟计时器超时且接口依然为根接口或指定接口</li><li>4.接口不再是根接口或指定接口或指定状态</li><li>5.接口被禁用或链路失效</li><li><span class="green">STP的端口收敛时间大概是30-50s</span></li></ul>',6)),e(a,{src:"/blog/images/study/ne/STP的接口状态迁移.png",title:"STP的接口状态迁移"}),l[2]||(l[2]=i("br",null,null,-1)),l[3]||(l[3]=i("h3",{id:"_3-rstp协议",tabindex:"-1"},[t("3.RSTP协议 "),i("a",{class:"header-anchor",href:"#_3-rstp协议","aria-label":'Permalink to "3.RSTP协议"'},"​")],-1)),l[4]||(l[4]=i("p",null,"RSTP的端口角色和端口状态的变化",-1)),e(a,{src:"/blog/images/study/ne/RSTP.png",title:"RSTP"}),l[5]||(l[5]=i("br",null,null,-1)),e(a,{src:"/blog/images/study/ne/RSTP示例.png",title:"RSTP示例"}),l[6]||(l[6]=s('<br><h4 id="_1-rstp的快速收敛能力" tabindex="-1">1.RSTP的快速收敛能力 <a class="header-anchor" href="#_1-rstp的快速收敛能力" aria-label="Permalink to &quot;1.RSTP的快速收敛能力&quot;">​</a></h4><ul><li>1.Proposal/Agreement机制</li><li><ul><li>Proposal/Agreement机制简称P/A机制，其目的是使一个<span class="green">指定端口</span>尽快进入Forwarding状态</li></ul></li><li>2.根端口快速切换机制</li><li><ul><li>如果RSTP网络中一个根端口失效，那么网络中最优的<span class="green">Alternate端口</span>将成为根端口并直接进入Forwarding状态</li></ul></li><li>3.边缘端口</li><li><ul><li>边缘端口不参与RSTP运算，可以由Disable直接进入Forwarding状态，且不经历时延，就像在端口上将STP禁用。但是一旦边缘端口收到配置BPDU，就丧失了边缘端口属性，成为普通STP端口，并重新进行生成树计算，从而引起网络震荡</li></ul></li></ul><h4 id="_2-rstp的保护功能" tabindex="-1">2.RSTP的保护功能 <a class="header-anchor" href="#_2-rstp的保护功能" aria-label="Permalink to &quot;2.RSTP的保护功能&quot;">​</a></h4><ul><li>1.<span class="green">BPDU保护</span></li><li><ul><li>交换机上启用了BPDU保护功能后，如果<span class="brown">边缘端口</span>收到RST BPDU，边缘端口将被error-down，但是边缘端口属性不变，同时通知网管系统</li></ul></li><li>2.<span class="green">根保护</span></li><li><ul><li>由于维护人员的错误配置或网络中的恶意攻击，网络中合法根桥有可能会收到优先级更高的RST BPD，使得合法根桥失去根地位，从而引起网络拓扑结构的错误变动</li></ul></li><li>Root保护功能只能在<span class="brown">指定端口</span>上配置生效！</li></ul><h3 id="_4-mstp" tabindex="-1">4.MSTP <a class="header-anchor" href="#_4-mstp" aria-label="Permalink to &quot;4.MSTP&quot;">​</a></h3><ul><li>MSTP(Multiple Spanning Tree Protocol)多生成树协议是IEEE 802.1s中定义的生成树协议，通过生成多个生成树，来解决以太网环路问题</li><li>多棵生成树在VLAN间实现负载均衡，不听VLAN的流量按照不同的路径转发</li></ul>',7)),e(a,{src:"/blog/images/study/ne/MSTP.png",title:"MSTP"}),l[7]||(l[7]=i("br",null,null,-1)),l[8]||(l[8]=i("h4",{id:"mstp配置",tabindex:"-1"},[t("MSTP配置 "),i("a",{class:"header-anchor",href:"#mstp配置","aria-label":'Permalink to "MSTP配置"'},"​")],-1)),e(a,{src:"/blog/images/study/ne/MSTP配置.png",title:"MSTP配置"}),l[9]||(l[9]=i("br",null,null,-1))])}const g=r(P,[["render",p]]);export{m as __pageData,g as default};
