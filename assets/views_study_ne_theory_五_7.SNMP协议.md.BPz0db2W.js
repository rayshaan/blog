import{_ as n,C as s,c as r,o as d,b1 as t,G as e,j as a,a as u}from"./chunks/framework.BbzeyoJx.js";const h=JSON.parse('{"title":"五.7.SNMP协议","description":"","frontmatter":{},"headers":[],"relativePath":"views/study/ne/theory/五/7.SNMP协议.md","filePath":"views/study/ne/theory/五/7.SNMP协议.md","lastUpdated":1754292740000}'),o={name:"views/study/ne/theory/五/7.SNMP协议.md"};function p(S,l,_,M,P,N){const i=s("ImageViewer");return d(),r("div",null,[l[0]||(l[0]=t('<h1 id="五-7-snmp协议" tabindex="-1">五.7.SNMP协议 <a class="header-anchor" href="#五-7-snmp协议" aria-label="Permalink to &quot;五.7.SNMP协议&quot;">​</a></h1><h3 id="_1-网络管理的五大功能" tabindex="-1">1.网络管理的五大功能 <a class="header-anchor" href="#_1-网络管理的五大功能" aria-label="Permalink to &quot;1.网络管理的五大功能&quot;">​</a></h3><ul><li>故障管理：故障检测、隔离和纠正</li><li>配置管理：初始化网络、并配置网络</li><li>计费管理：记录网络资源的使用</li><li>性能管理：估价系统资源的运行状况及通信效率等</li><li>网络安全管理：对授权机制、访问控制、加密和加密关键字的管理</li></ul><h3 id="_2-简单网络管理协议snmp" tabindex="-1">2.简单网络管理协议SNMP <a class="header-anchor" href="#_2-简单网络管理协议snmp" aria-label="Permalink to &quot;2.简单网络管理协议SNMP&quot;">​</a></h3><ul><li>最重要的指导思想：尽可能简单</li><li>基本功能：</li><li><ul><li>1.监视网络性能</li></ul></li><li><ul><li>2.检测分析网络差错</li></ul></li><li><ul><li>3.配置网络设备等</li></ul></li></ul><h3 id="_3-snmp管理模型" tabindex="-1">3.SNMP管理模型 <a class="header-anchor" href="#_3-snmp管理模型" aria-label="Permalink to &quot;3.SNMP管理模型&quot;">​</a></h3><ul><li>NMS(Network Management System)：采用SNMP协议对网络设备进行管理的系统</li><li>Agent：被管理设备中的一个代理进程，与NMS进行交互</li><li>MIB(Management information base)：被管理设备所维护的变量(能够被Agent查询和设置的信息)构成的数据库</li><li>Management object：被管理对象，如设备中的某个硬件(如接口板)，也可以是在硬件或软件上配置的参数集合</li><li>Device：被管理设备</li></ul><div class="formula"> NMS<span>周期性</span>地向被管理设备Agent发出<span>查询请求</span></div><div class="formula"> 被管理设备Agent也可以<span>主动</span>向NMS发送<span>陷阱(Trap)</span>信息 </div><br><br>',11)),e(i,{src:"/blog/images/study/ne/SNMP管理模型.png",title:"SNMP管理模型"}),l[1]||(l[1]=t('<br><h4 id="mib" tabindex="-1">MIB <a class="header-anchor" href="#mib" aria-label="Permalink to &quot;MIB&quot;">​</a></h4><ul><li>MIB是一个数据库，指明了被管理设备所维护的变量(即能够被Agent查询和设置的信息)。</li><li>MIB在数据库中定义了被管理设备的一系列属性：</li><li><ul><li>对象标识符(Object IDentifier，OID)</li></ul></li><li><ul><li>对象的状态</li></ul></li><li><ul><li>对象的访问权限</li></ul></li><li><ul><li>对象的数据类型等</li></ul></li><li>MIB给出了一个数据结构，包含了网络中所有可能的被管理对象的集合。因为数据结构与树相似，MIB又被称为对象命名树</li></ul>',3)),e(i,{src:"/blog/images/study/ne/MIB数据库.png",title:"MIB数据库"}),l[2]||(l[2]=t('<br><h3 id="_4-snmpv3基本操作" tabindex="-1">4.SNMPv3基本操作 <a class="header-anchor" href="#_4-snmpv3基本操作" aria-label="Permalink to &quot;4.SNMPv3基本操作&quot;">​</a></h3><ul><li>NMS通过SNMPv3向北管理设备下发查询和设置操作指令，并接收操作响应信息，同时监听被管理设备发送的告警信息</li></ul><table tabindex="0"><thead><tr><th>功能</th><th>SNMPv3 操作类型</th><th>描述</th></tr></thead><tbody><tr><td></td><td>Get</td><td>从 Agent 中提取一个或多个参数值。</td></tr><tr><td>查询</td><td>GetNext</td><td>从 Agent 中按照字典顺序提取下一个参数值。</td></tr><tr><td></td><td>GetBulk</td><td>对 Agent 进行信息群查询。</td></tr><tr><td>设置</td><td>Set</td><td>通过 Agent 设置一个或多个参数值。</td></tr><tr><td>告警</td><td>Trap</td><td>Agent 主动向 NMS 发出信息，告知被管理设备出现的情况。</td></tr><tr><td></td><td>Inform</td><td>作用与 Trap 相同，但需要 NMS 进行接收确认，会占用较多系统资源。</td></tr><tr><td>响应消息</td><td>Response</td><td>Agent 对 Get/Set 操作的响应消息，NMS 对 Inform 的响应消息。</td></tr></tbody></table><h3 id="_5-snmpv3安全性" tabindex="-1">5.SNMPv3安全性 <a class="header-anchor" href="#_5-snmpv3安全性" aria-label="Permalink to &quot;5.SNMPv3安全性&quot;">​</a></h3><ul><li><span class="green">基本概念</span></li><li><ul><li><span class="brown">用户组(Group)</span>：拥有特定安全级别属性的一个用户集合。安全级别：</li></ul></li><li><ul><li>1级：privacy(鉴权且加密)</li></ul></li><li><ul><li>2级：anthentication(只鉴权)</li></ul></li><li><ul><li>3级：noauthentication(不鉴权不加密)</li></ul></li><li><ul><li><span class="brown">视图(View)</span>：允许用户访问的mib节点集合</li></ul></li><li><span class="green">安全机制</span></li><li><ul><li>1.<span class="brown">用户安全模块USM(User-based Security Model)</span>：</li></ul></li><li><ul><li>身份验证：Agent或NMS接到信息时首先必须确认信息是否来自有权限的NMS或Agent，并且信息在传输过程中未被改变</li></ul></li><li><ul><li>数据加密：通过对称秘钥系统，NMS和Agent共享同一秘钥对数据进行加密和解密</li></ul></li><li><ul><li>2.<span class="brown">基于视图的访问控制模块VACM(View-based Access Control Model)</span>：对用户组实现基于视图的访问控制</li></ul></li></ul><h3 id="_6-snmpv3配置举例-被管理设备方" tabindex="-1">6.SNMPv3配置举例(被管理设备方) <a class="header-anchor" href="#_6-snmpv3配置举例-被管理设备方" aria-label="Permalink to &quot;6.SNMPv3配置举例(被管理设备方)&quot;">​</a></h3>',7)),e(i,{src:"/blog/images/study/ne/SNMPv3配置举例.png",title:"SNMPv3配置举例"}),l[3]||(l[3]=a("br",null,null,-1)),l[4]||(l[4]=a("h3",{id:"_7-snmp报文格式",tabindex:"-1"},[u("7.SNMP报文格式 "),a("a",{class:"header-anchor",href:"#_7-snmp报文格式","aria-label":'Permalink to "7.SNMP报文格式"'},"​")],-1)),e(i,{src:"/blog/images/study/ne/SNMP报文格式.png",title:"SNMP报文格式"}),l[5]||(l[5]=t('<br><ul><li><span class="green">版本</span>：表示SNMP的版本，SNMPv3报文则对应字段值为3</li><li><span class="green">报头数据</span>：主要包含消息发送者所能支持的最大消息尺寸、消息采用的安全模式等描述内容</li><li><span class="green">安全参数</span>：包含SNMP实体引擎的相关信息、用户名、认证参数、加密参数等安全信息</li><li><span class="green">Context EngineID</span>：唯一标识一个SNMP实体，SNMP实体由<span class="green">SNMP协议引擎</span>和<span class="green">应用程序组成</span></li><li><span class="green">Context Name</span>：用于确定Context EngineID对被管理设备的MIB视图</li><li><span class="green">SNMPv3 PDU</span>：包含PDU类型、请求标识符、变量绑定列表等信息。其中SNMPv3 PDU包括：</li><li><ul><li>GetRequest PDU：查询请求</li></ul></li><li><ul><li>GetNextRequest PDU：查询下一个请求</li></ul></li><li><ul><li>GetBulkRequest PDU：查询多个请求</li></ul></li><li><ul><li>SetRequest PDU：设置请求</li></ul></li><li><ul><li>Trap PDU：陷阱请求</li></ul></li><li><ul><li>Response PDU：响应请求</li></ul></li></ul>',2))])}const b=n(o,[["render",p]]);export{h as __pageData,b as default};
