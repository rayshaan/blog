import{_ as i,C as t,c as d,o,j as a,G as n,a4 as r,a as e}from"./chunks/framework.C_GGjjHE.js";const k=JSON.parse('{"title":"六.1.静态路由协议","description":"","frontmatter":{},"headers":[],"relativePath":"views/study/ne/theory/六/1.静态路由协议.md","filePath":"views/study/ne/theory/六/1.静态路由协议.md","lastUpdated":1754979891000}'),u={name:"views/study/ne/theory/六/1.静态路由协议.md"};function p(b,l,m,g,f,_){const s=t("ImageViewer");return o(),d("div",null,[l[0]||(l[0]=a("h1",{id:"六-1-静态路由协议",tabindex:"-1"},[e("六.1.静态路由协议 "),a("a",{class:"header-anchor",href:"#六-1-静态路由协议","aria-label":'Permalink to "六.1.静态路由协议"'},"​")],-1)),l[1]||(l[1]=a("h3",{id:"_1-路由信息",tabindex:"-1"},[e("1.路由信息 "),a("a",{class:"header-anchor",href:"#_1-路由信息","aria-label":'Permalink to "1.路由信息"'},"​")],-1)),l[2]||(l[2]=a("ul",null,[a("li",null,"目的网络：标识目的网段"),a("li",null,"掩码：与目的地址共同标识一个网段"),a("li",null,"出接口：数据包被路由后离开本路由的接口"),a("li",null,"下一跳：路由器转发到达目的网段的数据包所使用的下一跳地址")],-1)),n(s,{src:"/blog/images/study/ne/路由信息.png",title:"路由信息"}),l[3]||(l[3]=a("br",null,null,-1)),l[4]||(l[4]=a("h4",{id:"_1-路由信息获取方式",tabindex:"-1"},[e("1.路由信息获取方式 "),a("a",{class:"header-anchor",href:"#_1-路由信息获取方式","aria-label":'Permalink to "1.路由信息获取方式"'},"​")],-1)),n(s,{src:"/blog/images/study/ne/路由信息获取方式.png",title:"路由信息获取方式"}),l[5]||(l[5]=a("br",null,null,-1)),l[6]||(l[6]=a("h4",{id:"_2-路由表添加过程",tabindex:"-1"},[e("2.路由表添加过程 "),a("a",{class:"header-anchor",href:"#_2-路由表添加过程","aria-label":'Permalink to "2.路由表添加过程"'},"​")],-1)),n(s,{src:"/blog/images/study/ne/路由表添加过程.png",title:"路由表添加过程"}),l[7]||(l[7]=r('<br><h4 id="_3-路由表使用-最长匹配原则" tabindex="-1">3.路由表使用:最长匹配原则 <a class="header-anchor" href="#_3-路由表使用-最长匹配原则" aria-label="Permalink to &quot;3.路由表使用:最长匹配原则&quot;">​</a></h4><p>两种特殊路由：<br></p><ul><li><span class="green">主机路由</span>：匹配32位</li><li><span class="green">默认路由</span>：匹配0位</li></ul><p>采用<span class="brown">二叉树检索</span><br> 使用路由条目唯一前缀(unique prefix)来构造二叉树<br></p>',5)),n(s,{src:"/blog/images/study/ne/路由表使用最长匹配原则.png",title:"路由表使用最长匹配原则"}),l[8]||(l[8]=a("br",null,null,-1)),l[9]||(l[9]=a("h4",{id:"_4-数据转发流程",tabindex:"-1"},[e("4.数据转发流程 "),a("a",{class:"header-anchor",href:"#_4-数据转发流程","aria-label":'Permalink to "4.数据转发流程"'},"​")],-1)),n(s,{src:"/blog/images/study/ne/数据转发流程.png",title:"数据转发流程"}),l[10]||(l[10]=r('<br><h3 id="_2-静态路由" tabindex="-1">2.静态路由 <a class="header-anchor" href="#_2-静态路由" aria-label="Permalink to &quot;2.静态路由&quot;">​</a></h3><p>静态路由是指由网络管理员<span class="green">手动配置</span>的路由</p><ul><li>1.关联下一跳IP的方式</li></ul><div class="formula"> [Huawei] ip route-static ip-address { mask | mask-length } nexthop-address </div> - 2.关联出接口的方式 <div class="formula"> [Huawei] ip route-static ip-address { mask | mask-length } interface-type interface-number </div> - 3.关联出接口的下一跳IP方式 <div class="formula"> [Huawei] ip route-static ip-address { mask | mask-length } interface-type interface-number [nexthop-address] </div><p>在创建静态路由时，可以同时指定出接口和下一跳。对于不同的出接口类型，也可以只指定出接口或只指定下一跳</p><ul><li>对于点到点接口(串口)，只需指定出接口</li><li>对于广播接口(以太网接口)，必须指定下一跳</li></ul><h3 id="_3-缺省路由" tabindex="-1">3.缺省路由 <a class="header-anchor" href="#_3-缺省路由" aria-label="Permalink to &quot;3.缺省路由&quot;">​</a></h3><ul><li>缺省路由是一种特殊的路由，当报文没有在路由表中找到匹配的具体路由表项时才使用的路由。如果报文的目的地址不能与路由表的任何目的地址相匹配，那么该报文将选取缺省路由进行转发</li><li>缺省路由在路由表中的形式为<span class="green">0.0.0.0/0</span>，缺省路由也被叫做<span class="green">默认路由</span></li><li>缺省路由一般用于企业网络出口，配置一条缺省路由让出口设备能够转发前往Internet上任意地址的IP报文</li></ul>',13)),n(s,{src:"/blog/images/study/ne/缺省路由.png",title:"缺省路由"}),l[11]||(l[11]=a("br",null,null,-1)),l[12]||(l[12]=a("h3",{id:"_4-路由递归",tabindex:"-1"},[e("4.路由递归 "),a("a",{class:"header-anchor",href:"#_4-路由递归","aria-label":'Permalink to "4.路由递归"'},"​")],-1)),l[13]||(l[13]=a("p",null,[e("路由必须有直连的下一跳才能够指导转发，但是路由生成时"),a("span",{class:"green"},"下一跳可能不是直连"),e("的，因此需要计算出一个直连的下一跳和对应的出接口，这个过程就叫做路由递归。路由递归也被成为"),a("span",{class:"brown"},"路由迭代")],-1)),n(s,{src:"/blog/images/study/ne/路由递归.png",title:"路由递归"}),l[14]||(l[14]=a("br",null,null,-1)),l[15]||(l[15]=a("h3",{id:"_5-等价路由",tabindex:"-1"},[e("5.等价路由 "),a("a",{class:"header-anchor",href:"#_5-等价路由","aria-label":'Permalink to "5.等价路由"'},"​")],-1)),l[16]||(l[16]=a("p",null,"路由表中存在等价路由之后，前往该目的网段的IP报文路由器会通过所有的有效的接口、下一跳转发，这种转发行为被称为负载分担",-1)),n(s,{src:"/blog/images/study/ne/等价路由.png",title:"等价路由"}),l[17]||(l[17]=a("br",null,null,-1)),l[18]||(l[18]=a("h3",{id:"_6-浮动路由",tabindex:"-1"},[e("6.浮动路由 "),a("a",{class:"header-anchor",href:"#_6-浮动路由","aria-label":'Permalink to "6.浮动路由"'},"​")],-1)),l[19]||(l[19]=a("ul",null,[a("li",null,[e("静态路由支持配置时"),a("span",{class:"green"},"手动指定优先级"),e("，可以通过配置目的地址/掩码相同、优先级不同、下一跳不同的静态路由，实现转发路径的备份")]),a("li",null,"浮动路由是主用路由的备份，保证链路故障时提供备份路由。主用路由下一跳可达时该备份路由不会出现在路由表")],-1)),n(s,{src:"/blog/images/study/ne/浮动路由.png",title:"浮动路由"}),l[20]||(l[20]=a("br",null,null,-1))])}const x=i(u,[["render",p]]);export{k as __pageData,x as default};
